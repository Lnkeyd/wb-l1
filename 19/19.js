// –î–∞–≤–∞–π —Å–∫–∞–∂–µ–º —á—Ç–æ –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç, –¥–∞—Ç–∞, –∫—Ç–æ –∑–∞–ø–æ–º—Ç–∏–ª, —Ñ–æ—Ç–∫–∞, –ª–∞–π–∫–∏, –∫–æ–º–µ–Ω—Ç—ã

// –§–ª–æ—É:: –ü–æ–¥–≥—Ä—É–∑–∫–∞ –≤ LocalStorage
//

// **** –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ-—Ü–∏–∏
function convertTime(ms) {
  const date = new Date(ms * 1000);

  const hours = date.getHours();
  const minutes = "0" + date.getMinutes();

  // –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 10:30:23
  const formattedTime =
    date.toLocaleDateString() + " " + hours + ":" + minutes.substr(-2);

  return formattedTime;
}

function throttle(fn, delay) {
  let run = true;
  return (...args) => {
    if (run) {
      fn(...args);
      run = false;
      setTimeout(() => {
        run = true;
      }, delay);
    }
  };
}

// **** –ö–æ–Ω–µ—Ü —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã—Ö —Ñ-—Ü–∏–π
const posts = document.querySelector(".posts");
posts.addEventListener("scroll", throttle(checkPosition, 250));
posts.addEventListener("resize", throttle(checkPosition, 250));

const params = {
  client_id: 51778161,
  redirect_uri: "http://127.0.0.1:5500/19/auth.html",
  token_uri: "https://oauth.vk.com/blank.html",
  owner_id: -45407805,
};

const ACCESS_TOKEN = localStorage.getItem("vk-app-access");
// –ï—Å–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ –≤—ã–¥–∞—Å—Ç Too Many Requests Per Second
const COUNT = 3;
// –£–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç –≤ –∑–∞–∫—Ä–µ–ø–µ, —Ç.–∫. —ç—Ç–æ —Å—Ç–∞—Ç—å—è –æ—Ç —Å–∞–º–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
let OFFSET = localStorage.getItem("vk-app-offset") || 1;
let MAX_POSTS = 100;

if (!ACCESS_TOKEN) authUser();
function authUser() {
  window.location = `https://oauth.vk.com/authorize?client_id=${params.client_id}&redirect_uri=${params.redirect_uri}&display=popup&response_type=token&scope=offline&v=5.154`;
}

function fetchPosts() {
  const LS_POSTS = localStorage.getItem("vk-app-posts");
  //   –ï—Å–ª–∏ –µ—Å—Ç—å —É–∂–µ –ø–æ—Å—Ç—ã, —Ç–æ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∏—Ö
  if (LS_POSTS) {
    return;
  }
  var script = document.createElement("SCRIPT");
  script.src = `https://api.vk.com/method/wall.get?v=5.154&access_token=${ACCESS_TOKEN}&owner_id=${params.owner_id}&count=${COUNT}&offset=${OFFSET}&callback=createPosts`;
  document.getElementsByTagName("head")[0].appendChild(script);
}

// –ó–¥–µ—Å—å –∫ –∫–æ–ª–±—ç–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç —Ñ-—é createPosts, —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å—Ç–∏—Ç –µ—ë —á–µ—Ä–µ–∑ JSONP
fetchPosts();

async function createPosts(result) {
  MAX_POSTS = result.response?.count;

  if (OFFSET + COUNT >= MAX_POSTS) return;

  OFFSET += COUNT;

  // –§–ª–æ—É —Ç–∞–∫–æ–π:
  // 1) –ù–∞—Ö–æ–¥–∏–º –ò–º—è + –§–∞–º–∏–ª–∏—è –ø–æ id, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–ª–±—ç–∫ getUsername
  // 2) –ù–∞—à –ø–æ—Ç–æ–∫ –Ω–µ –∂–¥—ë—Ç –µ—ë (–Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏) –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ä–∞–∑—É –∂–µ —Ñ-—é postCreator
  // 3) –ö–∞–∫ —Ç–æ–ª—å–∫–æ postCreator –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞, –ø–æ—Å–ª–µ –Ω–µ—ë (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤ –∫–æ–ª—Å—Ç—ç–∫–µ) –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Ñ-—è getUsername
  // 4) –§-—è getUsername –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–≤–µ–∂–µ—Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–æ–º postCreator –ø–æ—Å—Ç–∞
  await result.response?.items.forEach((element) => {
    postCreator(element);
    utilScriptResults(element.signer_id);
  });
}

function utilScriptResults(param) {
  var script = document.createElement("SCRIPT");
  script.id = `util-script-${param}`;
  script.src = `https://api.vk.com/method/users.get?v=5.154&access_token=${ACCESS_TOKEN}&user_ids=${param}&callback=getUsername`;
  document.getElementsByTagName("head")[0].appendChild(script);
}

async function getUsername(result) {
  const user = result?.response[0];
  try {
    document.getElementById(`user-${user.id}`).textContent =
      user.first_name + " " + user.last_name;
    document.getElementById(`util-script-${user.id}`).remove();
    // –ï—Å–ª–∏ –≥—Ä—É–∑–∏–º –Ω–æ–≤—ã–π —á–∞–Ω–∫, —Ç–æ —Å–µ—Ç—Ç–∏–º –µ–≥–æ –≤ LS
    // ...
  } catch (e) {
    console.error(e);
    console.error(
      "getUserName" +
        " " +
        user.id +
        " " +
        user.first_name +
        " " +
        user.last_name
    );
  }
}

function postCreator(post) {
  const postEl = document.createElement("div");
  postEl.classList.add("post-item");
  postEl.innerHTML = `
        <div class="post-item__username" id="user-${post.signer_id}"></div>
        <div class="post-item__date">${convertTime(post.date)}</div>
        <div class="post-item__text">${post.text}</div>
        <div class="post-item-photos">
        ${post.attachments
          .map((item) => `<img src="${item.photo.sizes[2].url}"/>`)
          .join("")}
        </div>
        <div class="post-item-info">
            <div class="post-item-info__likes">
            ‚ù§Ô∏è: <span class="likes__count">${post.likes.count}</span>
            </div>
            <div class="post-item-info__comments">
            üí¨: <span class="comments__count">${post.comments.count}</span>
            </div>
        </div>
    `;
  document.querySelector(".posts").append(postEl);
}

// –°–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ä–µ—Å—É—Ä—Å –ø–æ —Ç–µ–º–µ:
// https://doka.guide/js/infinite-scroll/
function checkPosition() {
  // –ù–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–Ω–∞—Ç—å –≤—ã—Å–æ—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –≤—ã—Å–æ—Ç—É —ç–∫—Ä–∞–Ω–∞:
  const posts = document.querySelector(".posts");

  //   max-height –±–ª–æ–∫–∞
  const height = posts.offsetHeight;
  //   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –µ—Å–ª–∏ –ø—Ä–æ—Å–∫—Ä–æ–ª–∏—Ç—å –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞
  //   –û–Ω–∞ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ, —Ç.–∫. —Å—Ç–æ–∏—Ç overflowY: scroll
  const screenHeight = posts.scrollHeight;

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–∏–∫—Å–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—Å–∫—Ä–æ–ª–ª–∏–ª:
  const scrolled = posts.scrollTop;
  console.log(scrolled);

  // –û–±–æ–∑–Ω–∞—á–∏–º –ø–æ—Ä–æ–≥, –ø–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –∫–æ—Ç–æ—Ä–æ–º—É
  // –±—É–¥–µ–º –≤—ã–∑—ã–≤–∞—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.
  // –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ ‚Äî –∑–∞ 2 –ø–æ—Å—Ç–∞ –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:
  const threshold = screenHeight - height * 2;

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏–∑ —ç–∫—Ä–∞–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:
  const position = scrolled;

  if (position >= threshold) {
    if (OFFSET + COUNT >= MAX_POSTS) return;
    // –ï—Å–ª–∏ –º—ã –ø–µ—Ä–µ—Å–µ–∫–ª–∏ –ø–æ–ª–æ—Å—É-–ø–æ—Ä–æ–≥, –≤—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.
    fetchPosts();
  }
}
